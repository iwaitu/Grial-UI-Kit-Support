xaml file:

<?xml version="1.0" encoding="utf-8"?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms" xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" x:Class="intliveMobile.LoginPage" xmlns:artina="clr-namespace:UXDivers.Artina.Shared;assembly=UXDivers.Artina.Shared" xmlns:local="clr-namespace:intliveMobile;assembly=intlive.Mobile" Title="{artina:Translate Key=PageTitleLogin}">

    <!--MAIN CONTAINER-->
    <Grid>
        <!---BACKGROUND IMAGE-->
        <Image Style="{StaticResource LoginBackgroundImage}" />

        <ScrollView Padding="{ StaticResource MainWrapperPadding }">
            <!-- MAIN CONTAINER -->
            <Grid ColumnSpacing="0" RowSpacing="0" HorizontalOptions="Fill" VerticalOptions="FillAndExpand">

                <Grid.RowDefinitions>
                    <RowDefinition Height="120" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <!-- LOGO -->
                <Grid Grid.Row="0" WidthRequest="60" HeightRequest="60" Margin="20" VerticalOptions="End" HorizontalOptions="Start">

                    <BoxView BackgroundColor="{ DynamicResource AccentColor }" />

                    <Label TextColor="{ DynamicResource OverImageTextColor }" FontSize="42" Text="{ x:Static local:GrialShapesFont.LogoGrial }" Style="{StaticResource FontIcon}" HorizontalTextAlignment="Center" VerticalTextAlignment="Center" />
                </Grid>

                <!-- CLOSE ICON -->
                <!--<Label Grid.Row="0" Style="{ DynamicResource IconCloseLabelStyle }" HorizontalOptions="End" VerticalOptions="Start" TranslationX="-20" TranslationY="35">
                    <Label.GestureRecognizers>
                        <TapGestureRecognizer Tapped="OnCloseButtonClicked" />
                    </Label.GestureRecognizers>
                </Label>-->

                <!--CLAIM TEXT-->
                <StackLayout Grid.Row="1" Spacing="10" Padding="20,10" Orientation="Vertical" VerticalOptions="Center">

                    <Label LineBreakMode="WordWrap" Text="{artina:Translate Key=LabelLoginOrRegisterUsinMailOrPass}" TextColor="{ DynamicResource OverImageTextColor }" VerticalTextAlignment="Center" FontAttributes="Bold">
                        <Label.FontSize>
                            <OnIdiom x:TypeArguments="x:Double" Phone="26" Tablet="36" />
                        </Label.FontSize>
                    </Label>

                    <Label LineBreakMode="WordWrap" Text="{ artina:Translate Key=LabelLoginOrRegisterUsinMailOrPass}" TextColor="{ DynamicResource OverImageTextColor }" VerticalTextAlignment="Center">
                        <Label.FontSize>
                            <OnIdiom x:TypeArguments="x:Double" Phone="17" Tablet="27" />
                        </Label.FontSize>
                    </Label>

                    <BoxView Style="{DynamicResource BrandNameOrnamentStyle}" BackgroundColor="{ DynamicResource OverImageTextColor }" />

                </StackLayout>


                <!---FIELDS CONTAINER-->
                <Grid Grid.Row="2" Padding="40,0" ColumnSpacing="0" RowSpacing="0" VerticalOptions="CenterAndExpand" HeightRequest="130">

                    <StackLayout Grid.Row="0" VerticalOptions="StartAndExpand">

                        <!---EMAIL ENTRY-->
                        <Entry Placeholder="{ artina:Translate StringEmail }" Style="{StaticResource ArtinaLoginEntryStyle}" Text="{Binding Email}">

                            <Entry.Behaviors>
                                <artina:EmailValidatorBehavior x:Name="emailValidator" />
                            </Entry.Behaviors>
                        </Entry>

                        <Label Text="{ artina:Translate ErrorPleaseEnterValidEmail }" IsVisible="false" Style="{StaticResource ValidationEntryErrorStyle}">

                            <Label.Triggers>
                                <DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference emailValidator}, Path=IsValid}" Value="false">
                                    <Setter Property="IsVisible" Value="true" />
                                </DataTrigger>
                            </Label.Triggers>
                        </Label>

                    </StackLayout>

                    <!---PASSWORD FIELD-->
                    <Entry Grid.Row="2" Text="{Binding Password }" Placeholder="{ artina:Translate StringPassword }" IsPassword="true" Style="{StaticResource ArtinaLoginEntryStyle}" VerticalOptions="StartAndExpand" />

                </Grid>


                <!-- FOOTER -->
                <StackLayout HorizontalOptions="Fill" VerticalOptions="EndAndExpand" Padding="20" Grid.Row="3">

                    <artina:Button BackgroundColor="#3b5998" TextColor="{ DynamicResource OverImageTextColor }" VerticalOptions="End" Text="{artina:Translate Key=StringWeChat}" WidthRequest="{ artina:OnOrientationDouble
								LandscapePhone=200,
								LandscapeTablet=400 }" HorizontalOptions="{ artina:OnOrientationLayoutOptions
								PortraitPhone=Fill,
								LandscapePhone=Center,
								PortraitTablet=Fill,
								LandscapeTablet=Center }" Command="{Binding LoginCommand}" />

                    <artina:Button Style="{StaticResource PrimaryActionButtonStyle}" VerticalOptions="End" Text="{artina:Translate Key=StringLogin}" WidthRequest="{ artina:OnOrientationDouble
								LandscapePhone=200,
								LandscapeTablet=400 }" HorizontalOptions="{ artina:OnOrientationLayoutOptions
								PortraitPhone=Fill,
								LandscapePhone=Center,
								PortraitTablet=Fill,
								LandscapeTablet=Center }" Command="{Binding LoginCommand}"/>
                </StackLayout>

            </Grid>
        </ScrollView>

    </Grid>
</ContentPage>



=====================================================
xaml.cs

using intliveMobile.ViewModels.Logins;
using System;
using System.Collections.Generic;

using Xamarin.Forms;

namespace intliveMobile
{
    public partial class LoginPage : ContentPage
    {
        
        public LoginPage()
        {
            InitializeComponent();
            NavigationPage.SetHasNavigationBar(this, false);
            BindingContext = new LoginViewModel();
        }

        public async void OnSignupStackTapped(object sender, EventArgs e)
        {
            if (LoginPage.IsPageInNavigationStack<SignUpPage>(Navigation))
            {
                await Navigation.PopAsync();
                return;
            }

            var signUpPage = new SignUpPage();
            await Navigation.PushAsync(signUpPage);
        }

        async void OnCloseButtonClicked(object sender, EventArgs args)
        {
            await Navigation.PopModalAsync();
        }


        public static bool IsPageInNavigationStack<TPage>(INavigation navigation) where TPage : Page
        {
            if (navigation.NavigationStack.Count > 1)
            {
                var last = navigation.NavigationStack[navigation.NavigationStack.Count - 2];

                if (last is TPage)
                {
                    return true;
                }
            }
            return false;
        }
    }
}
